// This is the Prisma schema file. Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String // For display, from Better Auth
  email         String    @unique // Better Auth ensures this is unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  links         Link[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// RENAMED to Link model
model Link {
  id              String           @id @default(cuid())
  slug            String           @unique // This is the globally unique part in hi.new/slug
  label           String? // Optional internal label for the user to identify this link
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryOptions DeliveryOption[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("link") // UPDATED table map
}

// UPDATED DeliveryOption model to reflect rename
model DeliveryOption {
  id          String       @id @default(cuid())
  linkId      String // UPDATED - foreign key to Link
  link        Link         @relation(fields: [linkId], references: [id], onDelete: Cascade) // UPDATED - relation to Link
  type        DeliveryType
  destination String
  active      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("delivery_option")
}

enum DeliveryType {
  EMAIL
  WEBHOOK
}
