{
  "tasks": [
    {
      "id": 1,
      "title": "Setup Project Repository",
      "description": "Initialize the project repository with Next.js, Tailwind CSS, and Prisma ORM.",
      "details": "Create a new Next.js project. Install Tailwind CSS for styling. Set up Prisma ORM for database interactions. Configure basic project structure and version control.",
      "testStrategy": "Verify project setup by running a basic Next.js page and checking Prisma connection to a local PostgreSQL instance.",
      "priority": "high",
      "dependencies": [],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Configure Authentication with Better Auth",
      "description": "Integrate Better Auth for user authentication and management.",
      "details": "Set up Better Auth provider. Implement signup, login, and logout flows. Secure API routes with authentication middleware.",
      "testStrategy": "Test user registration, login, and protected route access. Verify session management and error handling.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Install Better Auth Package",
          "description": "Add Better Auth to both client and server parts of the project",
          "dependencies": [],
          "details": "Install the Better Auth package using npm, yarn, or other package manager in both client and server parts of the project",
          "status": "done",
          "testStrategy": "Verify package installation by checking package.json and node_modules"
        },
        {
          "id": 2,
          "title": "Configure Environment Variables",
          "description": "Set up required environment variables for Better Auth",
          "dependencies": [
            1
          ],
          "details": "Create a .env file in the project root and add necessary environment variables including a secret key and base URL",
          "status": "done",
          "testStrategy": "Confirm environment variables are properly loaded in the application"
        },
        {
          "id": 3,
          "title": "Create Auth Instance",
          "description": "Initialize Better Auth instance in the application",
          "dependencies": [
            2
          ],
          "details": "Create an auth.ts file in the appropriate location (project root, lib/, or utils/ folder) to import Better Auth and create the auth instance",
          "status": "done",
          "testStrategy": "Verify the auth instance is properly exported and accessible"
        },
        {
          "id": 4,
          "title": "Set Up Database Configuration",
          "description": "Configure database for storing user authentication data",
          "dependencies": [
            3
          ],
          "details": "Configure Better Auth to use SQLite, PostgreSQL, MySQL, or another database through Kysely or appropriate adapters",
          "status": "done",
          "testStrategy": "Test database connection and verify schema creation"
        },
        {
          "id": 5,
          "title": "Create API Handler for Authentication",
          "description": "Implement route handler for authentication API requests",
          "dependencies": [
            3
          ],
          "details": "Set up a route handler to serve POST and GET requests to the /api/auth endpoint using the handler provided by Better Auth",
          "status": "done",
          "testStrategy": "Test API endpoints for authentication functionality"
        },
        {
          "id": 6,
          "title": "Implement Authentication Flows",
          "description": "Create signup, login, and logout functionality in the application",
          "dependencies": [
            5
          ],
          "details": "Implement user interface components and logic for signup, login, and logout flows, and secure API routes with authentication middleware\n<info added on 2025-05-11T20:13:41.750Z>\n<update><timestamp>2025-05-11T20:13:38Z</timestamp><content>Implement user interface components for authentication, including Login and Signup forms built with ShadCN UI and refactored using AuthCardLayout for consistent styling. Integrate client-side form validation leveraging `react-hook-form` and `zod` for robust input handling and error feedback. Develop logic for signup, login, and logout flows, ensuring seamless integration with the existing API handler for authentication. Implement logout functionality and conditional UI rendering based on the user's authentication state. Secure API routes with authentication middleware, partially covered by the Better Auth handler, to protect sensitive endpoints and ensure only authenticated users can access them.</content></update>\n</info added on 2025-05-11T20:13:41.750Z>",
          "status": "pending",
          "testStrategy": "Test complete authentication flows including signup, login, logout, and secured route access"
        }
      ]
    },
    {
      "id": 3,
      "title": "Design and Implement User Data Model",
      "description": "Define and implement the User data model in Prisma.",
      "details": "Create Prisma schema for User, including username, email, apiKey, deliveryOptions, organization, referrals, createdAt, and updatedAt fields. Generate and run migrations.",
      "testStrategy": "Test CRUD operations on User model. Validate uniqueness constraints and field types.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Implement GET Endpoint for Contact Form",
      "description": "Create a GET endpoint at hi.new/{slug} to display a simple contact form.",
      "status": "done",
      "dependencies": [
        1,
        3
      ],
      "priority": "high",
      "details": "The dynamic page `app/[slug]/page.tsx` has been created and successfully fetches Link data. It renders the `ContactForm` component. The page uses Next.js dynamic routing to handle different usernames via the slug parameter. The page receives the slug parameter through the params object passed as a prop to the page component.",
      "testStrategy": "Test endpoint accessibility, form rendering, and mobile responsiveness. Validate WCAG compliance. Verify that the dynamic routing works correctly with different slug values. Ensure the Link data is properly fetched and displayed.",
      "subtasks": [
        {
          "id": 5.1,
          "title": "UI Polish",
          "description": "Complete final UI polish for the contact form page",
          "status": "done"
        },
        {
          "id": 5.2,
          "title": "Integrate Message Sending Status",
          "description": "Integrate actual message sending status from the POST handler if needed on this page",
          "status": "done"
        }
      ]
    },
    {
      "id": 6,
      "title": "Implement POST Endpoint for Message Submission",
      "description": "Create a POST endpoint at hi.new/{slug} to accept structured JSON data.",
      "status": "done",
      "dependencies": [
        1,
        3,
        5
      ],
      "priority": "high",
      "details": "The POST handler in app/[slug]/route.ts has been created with Zod validation using ContactFormSchema. The handler successfully fetches the Link and its active DeliveryOptions. Next steps include implementing the actual delivery logic for email (via Resend) and webhook POSTs, along with robust error handling and retry mechanisms for failed deliveries.",
      "testStrategy": "Test endpoint with valid and invalid payloads. Verify validation error responses for malformed data. Test successful message processing flow. Implement tests for delivery mechanisms and error recovery scenarios.",
      "subtasks": [
        {
          "id": 6.1,
          "title": "Implement delivery logic for email via Resend",
          "description": "Create the functionality to deliver validated messages to recipients via email using Resend API",
          "status": "done"
        },
        {
          "id": 6.2,
          "title": "Implement webhook POST delivery",
          "description": "Create the functionality to deliver validated messages to webhook endpoints via POST requests",
          "status": "done"
        },
        {
          "id": 6.3,
          "title": "Implement error handling and retry mechanisms",
          "description": "Add robust error handling for delivery failures and implement retry logic for transient errors",
          "status": "done"
        },
        {
          "id": 6.4,
          "title": "Add comprehensive delivery logging",
          "description": "Implement logging for all delivery attempts, successes, and failures to aid in debugging and monitoring",
          "status": "done"
        }
      ]
    },
    {
      "id": 7,
      "title": "Integrate Resend for Email Delivery",
      "description": "Set up Resend for forwarding messages to email.",
      "details": "Configure Resend API. Implement email template. Send email on message submission. Handle delivery status.",
      "testStrategy": "Test email delivery with various inputs. Verify delivery status and error handling.",
      "priority": "high",
      "dependencies": [
        1,
        6
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Implement Basic Rate Limiting",
      "description": "Add rate limiting to prevent abuse of endpoints.",
      "details": "Implement IP-based rate limiting for anonymous requests. Use Upstash for distributed rate limiting if needed.",
      "testStrategy": "Test rate limiting by exceeding limits and verifying error responses.",
      "priority": "medium",
      "dependencies": [
        1,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Design and Implement DeliveryOption Model",
      "description": "Define and implement the DeliveryOption data model in Prisma.",
      "details": "Create Prisma schema for DeliveryOption, including userId, type (EMAIL, WEBHOOK), destination, active, createdAt, and updatedAt fields. Generate and run migrations.",
      "testStrategy": "Test CRUD operations on DeliveryOption model. Validate relationships and field types.",
      "priority": "medium",
      "dependencies": [
        1,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Build User Settings for Delivery Options",
      "description": "Allow users to configure multiple delivery destinations.",
      "details": "Create UI for managing delivery options. Allow adding, editing, and removing email/webhook destinations. Store in DeliveryOption model.",
      "testStrategy": "Test UI flows for managing delivery options. Verify persistence and validation.",
      "priority": "medium",
      "dependencies": [
        2,
        3,
        9
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Implement Webhook Delivery",
      "description": "Add support for forwarding messages to webhook endpoints.",
      "details": "Extend message processing to send payloads to configured webhook URLs. Handle response codes and retries.",
      "testStrategy": "Test webhook delivery with various endpoints. Verify retry logic and error handling.",
      "priority": "medium",
      "dependencies": [
        6,
        9,
        10
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Integrate Upstash Redis for Message Queueing",
      "description": "Set up Upstash Redis for reliable message delivery.",
      "details": "Configure Upstash Redis. Queue messages for delivery. Implement worker to process queue.",
      "testStrategy": "Test message queuing and processing. Verify delivery order and error handling.",
      "priority": "medium",
      "dependencies": [
        1,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 13,
      "title": "Implement Retry Mechanism for Failed Deliveries",
      "description": "Add retry logic for failed message deliveries.",
      "details": "Store failed messages in temporary storage (PendingMessage model). Schedule retries with exponential backoff.",
      "testStrategy": "Test retry logic by simulating delivery failures. Verify retry scheduling and success.",
      "priority": "medium",
      "dependencies": [
        6,
        12
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 14,
      "title": "Design and Implement PendingMessage Model",
      "description": "Define and implement the PendingMessage data model in Prisma.",
      "details": "Create Prisma schema for PendingMessage, including recipient, sender, senderEmail, message, metadata, attempts, nextAttempt, createdAt, and updatedAt fields. Generate and run migrations.",
      "testStrategy": "Test CRUD operations on PendingMessage model. Validate relationships and field types.",
      "priority": "medium",
      "dependencies": [
        1,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 15,
      "title": "Implement API Key Generation and Management",
      "description": "Generate and manage API keys for programmatic access.",
      "details": "Add API key generation to user settings. Store keys securely. Allow users to revoke and regenerate keys.",
      "testStrategy": "Test API key generation, usage, and revocation. Verify security and uniqueness.",
      "priority": "medium",
      "dependencies": [
        2,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 21,
      "title": "Implement Premium Username System",
      "description": "Restrict short usernames (≤4 characters) to premium users.",
      "details": "Add validation for username length. Implement upgrade flow for premium usernames. Store premium status in User model.",
      "testStrategy": "Test username validation and upgrade flow. Verify premium status persistence.",
      "priority": "low",
      "dependencies": [
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 23,
      "title": "Integrate Subscription Billing",
      "description": "Add subscription management for premium features.",
      "details": "Integrate payment provider (e.g., Stripe). Implement subscription creation, renewal, and cancellation.",
      "testStrategy": "Test subscription flows. Verify payment processing and status updates.",
      "priority": "low",
      "dependencies": [
        2,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 24,
      "title": "Implement Referral Program",
      "description": "Add referral tracking and rewards.",
      "details": "Create Referral model. Track referrals and rewards. Display referral status in user settings.",
      "testStrategy": "Test referral tracking and reward assignment. Verify UI updates.",
      "priority": "low",
      "dependencies": [
        2,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 25,
      "title": "Add Analytics for Endpoint Usage",
      "description": "Track and display endpoint usage statistics.",
      "details": "Implement analytics collection for message delivery. Display usage stats in user dashboard.",
      "testStrategy": "Test analytics collection and display. Verify data accuracy.",
      "priority": "low",
      "dependencies": [
        6,
        12
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 26,
      "title": "Implement Advanced Spam Prevention",
      "description": "Add additional spam detection and prevention measures.",
      "details": "Integrate spam detection libraries. Add CAPTCHA or other anti-spam measures to contact form.",
      "testStrategy": "Test spam detection and prevention. Verify effectiveness and user experience.",
      "priority": "low",
      "dependencies": [
        5,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 27,
      "title": "Add Custom Form Styling Options",
      "description": "Allow users to customize the appearance of their contact form.",
      "details": "Add UI for form styling. Store preferences in User model. Apply styles to endpoint UI.",
      "testStrategy": "Test form styling UI and application. Verify persistence and rendering.",
      "priority": "low",
      "dependencies": [
        2,
        3,
        5
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 28,
      "title": "Build Link Creation and Management System",
      "description": "Develop a system that enables authenticated users to create, view, and manage globally unique Links (hi.new/slug), including UI for link creation, listing, and configuration of DeliveryOptions.",
      "details": "Implement a user interface allowing authenticated users to input a custom slug and optional label for new Links. On submission, validate the slug on the server for correct format (e.g., allowed characters, length) and check for global uniqueness before saving the Link to the database, associating it with the current user. Develop a UI component to list all Links owned by the user, displaying slug, label, and relevant metadata. Provide functionality for users to configure DeliveryOptions for each Link, which may include settings such as delivery method, scheduling, or access controls. Ensure all operations are protected by authentication (dependent on Task 2). Consider edge cases such as slug collisions, input sanitization, and error handling. Design the system for scalability and maintainability, with clear separation between UI, server logic, and data access layers.",
      "testStrategy": "Verify that only authenticated users can access link management features. Test link creation with valid and invalid slugs, ensuring slugs are globally unique and correctly validated. Confirm that new Links are saved and associated with the correct user. Check that the user's Links are accurately listed in the UI, and that DeliveryOptions can be configured and saved for each Link. Test error handling for duplicate slugs, invalid input, and unauthorized access. Perform end-to-end tests covering the full workflow: authentication, link creation, listing, and DeliveryOptions configuration.",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "high",
      "subtasks": []
    }
  ]
}